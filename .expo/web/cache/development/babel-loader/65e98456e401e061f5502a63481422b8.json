{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Manmeet Singh\\\\Desktop\\\\Folio-React-Native\\\\App.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport BottomTabNavigator from \"./navigation/BottomTabNavigator\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport * as SecureStore from \"expo-secure-store\";\nvar Stack = createStackNavigator();\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this);\n\n    _this.checkIfLoggedIn = function () {\n      SecureStore.getItemAsync(\"session\").then(function (sessionToken) {\n        _this.setState({\n          session: sessionToken\n        });\n      });\n    };\n\n    _this.state = {\n      session: null\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.checkIfLoggedIn();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var session = this.state.session;\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }\n      }, Platform.OS === \"ios\" && React.createElement(StatusBar, {\n        barStyle: \"default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 35\n        }\n      }), React.createElement(NavigationContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }\n      }, React.createElement(Stack.Navigator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }\n      }, session ? React.createElement(Stack.Screen, {\n        name: \"Root\",\n        component: BottomTabNavigator,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }\n      }) : React.createElement(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen,\n        initialParams: {\n          onLoggedIn: function onLoggedIn() {\n            return _this2.checkIfLoggedIn();\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\"\n  }\n});","map":{"version":3,"sources":["C:/Users/Manmeet Singh/Desktop/Folio-React-Native/App.js"],"names":["React","NavigationContainer","createStackNavigator","BottomTabNavigator","LoginScreen","SecureStore","Stack","App","checkIfLoggedIn","getItemAsync","then","sessionToken","setState","session","state","styles","container","Platform","OS","onLoggedIn","Component","StyleSheet","create","flex","backgroundColor"],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AAEA,OAAOC,kBAAP;AACA,OAAOC,WAAP;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AAEA,IAAMC,KAAK,GAAGJ,oBAAoB,EAAlC;;IAEqBK,G;;;;;AACnB,iBAAc;AAAA;;AAAA;;AACZ;;AADY,UAedC,eAfc,GAeI,YAAM;AAEtBH,MAAAA,WAAW,CAACI,YAAZ,CAAyB,SAAzB,EAAoCC,IAApC,CAAyC,UAACC,YAAD,EAAkB;AACzD,cAAKC,QAAL,CAAc;AACZC,UAAAA,OAAO,EAAEF;AADG,SAAd;AAGD,OAJD;AAKD,KAtBa;;AAGZ,UAAKG,KAAL,GAAa;AACXD,MAAAA,OAAO,EAAE;AADE,KAAb;AAHY;AASb;;;;wCACmB;AAElB,WAAKL,eAAL;AACD;;;6BAWQ;AAAA;;AAAA,UAECK,OAFD,GAEa,KAAKC,KAFlB,CAECD,OAFD;AAIP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEE,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyB,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD5B,EAEE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD,CAAO,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEGL,OAAO,GACN,oBAAC,KAAD,CAAO,MAAP;AAAc,QAAA,IAAI,EAAC,MAAnB;AAA0B,QAAA,SAAS,EAAEV,kBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADM,GAGN,oBAAC,KAAD,CAAO,MAAP;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,SAAS,EAAEC,WAFb;AAGE,QAAA,aAAa,EAAE;AACbe,UAAAA,UAAU,EAAE;AAAA,mBAAM,MAAI,CAACX,eAAL,EAAN;AAAA;AADC,SAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADF,CAFF,CADF;AAqBD;;;;EAlD8BR,KAAK,CAACoB,S;;SAAlBb,G;AAqDrB,IAAMQ,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE;AAFR;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from \"react\";\r\nimport { Platform, StatusBar, StyleSheet, View } from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\n\r\nimport BottomTabNavigator from \"./navigation/BottomTabNavigator\";\r\nimport LoginScreen from \"./screens/LoginScreen\";\r\n\r\nimport * as SecureStore from \"expo-secure-store\";\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nexport default class App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      session: null,\r\n    };\r\n\r\n    // uncomment this if you'd like to require a login every time the app is started\r\n    // SecureStore.deleteItemAsync(\"session\");\r\n  }\r\n  componentDidMount() {\r\n    // Check if there's a session when the app loads\r\n    this.checkIfLoggedIn();\r\n  }\r\n\r\n  checkIfLoggedIn = () => {\r\n    // See if there's a session data stored on the phone and set whatever is there to the state\r\n    SecureStore.getItemAsync(\"session\").then((sessionToken) => {\r\n      this.setState({\r\n        session: sessionToken,\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // get our session variable from the state\r\n    const { session } = this.state;\r\n\r\n    return (\r\n      <View style={styles.container}>\r\n        {Platform.OS === \"ios\" && <StatusBar barStyle=\"default\" />}\r\n        <NavigationContainer>\r\n          <Stack.Navigator>\r\n            {/* Check to see if we have a session, if so continue, if not login */}\r\n            {session ? (\r\n              <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\r\n            ) : (\r\n              <Stack.Screen\r\n                name=\"Login\"\r\n                component={LoginScreen}\r\n                initialParams={{\r\n                  onLoggedIn: () => this.checkIfLoggedIn(),\r\n                }}\r\n              />\r\n            )}\r\n          </Stack.Navigator>\r\n        </NavigationContainer>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}